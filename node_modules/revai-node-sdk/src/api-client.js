"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const FormData = require("form-data");
const fs = require("fs");
const api_request_handler_1 = require("./api-request-handler");
const CaptionType_1 = require("./models/async/CaptionType");
class RevAiApiClient {
    constructor(accessToken, version = 'v1') {
        this.apiHandler = new api_request_handler_1.ApiRequestHandler(`https://api.rev.ai/revspeech/${version}/`, accessToken);
    }
    getAccount() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', '/account', {}, 'json');
        });
    }
    getJobDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', `/jobs/${id}`, {}, 'json');
        });
    }
    getListOfJobs(limit, startingAfter) {
        return __awaiter(this, void 0, void 0, function* () {
            let params = [];
            if (limit) {
                params.push(`limit=${limit}`);
            }
            if (startingAfter) {
                params.push(`starting_after=${startingAfter}`);
            }
            const query = `?${params.join('&')}`;
            return yield this.apiHandler.makeApiRequest('get', `/jobs${params.length > 0 ? query : ''}`, {}, 'json');
        });
    }
    deleteJob(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('delete', `/jobs/${id}`, {}, 'text');
        });
    }
    submitJobUrl(mediaUrl, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (options) {
                options.media_url = mediaUrl;
            }
            else {
                options = { 'media_url': mediaUrl };
            }
            return yield this.apiHandler.makeApiRequest('post', `/jobs`, { 'Content-Type': 'application/json' }, 'json', options);
        });
    }
    submitJobLocalFile(filename, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let payload = new FormData();
            payload.append('media', fs.createReadStream(filename));
            if (options) {
                payload.append('options', JSON.stringify(options));
            }
            return yield this.apiHandler.makeApiRequest('post', `/jobs`, payload.getHeaders(), 'json', payload);
        });
    }
    getTranscriptObject(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', `/jobs/${id}/transcript`, { 'Accept': "application/vnd.rev.transcript.v1.0+json" /* JSON */ }, 'json');
        });
    }
    getTranscriptObjectStream(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', `/jobs/${id}/transcript`, { 'Accept': "application/vnd.rev.transcript.v1.0+json" /* JSON */ }, 'stream');
        });
    }
    getTranscriptText(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', `/jobs/${id}/transcript`, { 'Accept': "text/plain" /* TEXT */ }, 'text');
        });
    }
    getTranscriptTextStream(id) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiHandler.makeApiRequest('get', `/jobs/${id}/transcript`, { 'Accept': "text/plain" /* TEXT */ }, 'stream');
        });
    }
    getCaptions(id, contentType, channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = `/jobs/${id}/captions`;
            if (channelId) {
                url += `?speaker_channel=${channelId}`;
            }
            return yield this.apiHandler.makeApiRequest('get', url, { 'Accept': contentType || CaptionType_1.CaptionType.SRT }, 'stream');
        });
    }
}
exports.RevAiApiClient = RevAiApiClient;
//# sourceMappingURL=api-client.js.map